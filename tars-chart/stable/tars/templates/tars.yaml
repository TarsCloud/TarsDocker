
apiVersion: v1
kind: Service
metadata:
  name: tars-svc
spec:
  ports:
  - port: 17890
    protocol: TCP
    targetPort: 17890
  selector:
    app: tars
  clusterIP: None
  type: ClusterIP

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tars
spec:
  replicas: {{.Values.tars.replicas}} 
  serviceName: tars-svc
  selector:
    matchLabels:
      app: tars
  template:
    metadata:
      labels:
        app: tars
    spec:
      restartPolicy: Always
      containers:
        - name: tars
          image: {{.Values.tars.image}}
          imagePullPolicy: {{ .Values.tars.pullPolicy }}
          resources:
            {{- toYaml .Values.tars.resources | nindent 12 }}
          command: ["sh", "-c"]
          args: 
          - mkdir -p /data/log/${POD_NAME}/app_log;
            mkdir -p /data/log/${POD_NAME}/tarsnode-data;

            echo "mkdir succ"

            rm -rf /data/tars;mkdir -p /data/tars;

            if [ ! -f "/data/tars/app_log" ]; then
              ln -s  /data/log/${POD_NAME}/app_log /data/tars/app_log;
            fi

            if [ ! -f "/data/tars/tarsnode-data" ]; then
              ln -s  /data/log/${POD_NAME}/tarsnode-data /data/tars/tarsnode-data;
            fi
                        
            export DOMAIN="${POD_NAME}.tars-svc";

            export SLAVE="true";

            if [ "${POD_NAME}" == "tars-0" ]; then
              SLAVE="false";

              mkdir -p /data/log/${POD_NAME}/patchs;
              mkdir -p /data/log/${POD_NAME}/web_log;
              mkdir -p /data/log/${POD_NAME}/demo_log;

              if [ ! -f "/data/tars/web_log" ]; then
                ln -s  /data/log/${POD_NAME}/web_log /data/tars/web_log;
              fi

              if [ ! -f "/data/tars/demo_log" ]; then
                ln -s  /data/log/${POD_NAME}/demo_log /data/tars/demo_log;
              fi

              if [ ! -f "/data/tars/patchs" ]; then
                ln -s  /data/log/${POD_NAME}/patchs /data/tars/patchs;
              fi
            fi

            echo "DOMAIN:${DOMAIN}, POD_NAME:${POD_NAME}, SLAVE:${SLAVE}";

            /usr/local/tars/cpp/deploy/docker-init.sh
          env:
          - name: USER_CENTER_HOST
            value: http://auth.{{.Values.tars.namespace}}.{{.Values.tars.host}}:{{.Values.tars.port}}
          - name: COOKIE_DOMAIN
            value: .{{.Values.tars.namespace}}.{{.Values.tars.host}}
          - name: TARS_WEB_STRICT
            value: "{{.Values.tars.strict}}"
          - name: MYSQL_HOST
            value: mysql-service
          - name: MYSQL_ROOT_PASSWORD
            value: "{{.Values.mysql.password}}"
          - name: INET
            value: "eth0"
          - name: REBUILD
            value: "false"
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          volumeMounts:
          - name: localtime
            mountPath: /etc/localtime
          - name: data
            mountPath: /data/log
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime 
        - name: data
          hostPath:
            path: {{.Values.tars.data}}/{{.Values.tars.namespace}}
            type: DirectoryOrCreate

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-web-tars
spec:
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: tars
  type: ClusterIP

 
---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web-tars
spec:
  rules:
  - host: {{.Values.tars.namespace}}.{{.Values.tars.host}} 
    http:
      paths:
      - backend:
          serviceName: ingress-web-tars
          servicePort: 3000


---

apiVersion: v1
kind: Service
metadata:
  name: ingress-auth-tars
spec:
  ports:
  - port: 3001
    protocol: TCP
    targetPort: 3001
  selector:
    app: tars
  type: ClusterIP

 
---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: auth-tars
spec:
  rules:
  - host: auth.{{.Values.tars.namespace}}.{{.Values.tars.host}} 
    http:
      paths:
      - backend:
          serviceName: ingress-auth-tars
          servicePort: 3001

---

apiVersion: v1
kind: Service
metadata:
  name: tars-node-svc
spec:
  ports:
  - port: 19385
    protocol: TCP
    targetPort: 19853
  selector:
    app: tars-node
  clusterIP: None
  type: ClusterIP

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tars-node
spec:
  replicas: {{.Values.tarsnode.replicas}} 
  serviceName: tars-node-svc
  selector:
    matchLabels:
      app: tars-node
  template:
    metadata:
      labels:
        app: tars-node
    spec:
      restartPolicy: Always
      containers:
        - name: tars
          image: {{.Values.tarsnode.image}} 
          imagePullPolicy: {{ .Values.tarsnode.pullPolicy }}
          resources:
            {{- toYaml .Values.tarsnode.resources | nindent 12 }}
          command: ["sh", "-c"]
          args: 
          - mkdir -p /data/log/${POD_NAME}/app_log;
            mkdir -p /data/log/${POD_NAME}/tarsnode-data;
            mkdir -p /data/log/${POD_NAME}/remote_app_log;

            rm -rf /data/tars;mkdir -p /data/tars;

            if [ ! -f "/data/tars/app_log" ]; then
              ln -s  /data/log/${POD_NAME}/app_log /data/tars/app_log;
            fi

            if [ ! -f "/data/tars/tarsnode-data" ]; then
              ln -s  /data/log/${POD_NAME}/tarsnode-data /data/tars/tarsnode-data;
            fi

            if [ ! -f "/data/tars/remote_app_log" ]; then
              ln -s  /data/log/${POD_NAME}/remote_app_log /data/tars/remote_app_log;
            fi

            export DOMAIN="${POD_NAME}.tars-node-svc";
            export WEB_HOST=http://tars-0.tars-svc:3000;

            /sbin/entrypoint.sh
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          volumeMounts:
          - name: localtime
            mountPath: /etc/localtime
          - name: data
            mountPath: /data/log
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime 
        - name: data
          hostPath:
            path: {{.Values.tars.data}}/{{.Values.tars.namespace}}
            type: DirectoryOrCreate
